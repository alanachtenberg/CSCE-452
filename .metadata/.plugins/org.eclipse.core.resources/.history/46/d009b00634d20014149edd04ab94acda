import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.geom.Ellipse2D;
import java.util.Vector;
import java.lang.Math;
import java.awt.event.*;
import Jama.*;

import com.sun.corba.se.spi.orbutil.fsm.Action;

import javax.swing.event.MouseInputListener;

public class RobotArm extends Canvas{

	private class ColorPoint extends Point{
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;
		public Color pointColor;
		
		public ColorPoint(int x, int y, Color c){
			super(x,y);
			pointColor=c;
		}
	}

	private static final long serialVersionUID = 1L;
	private static final int NUMLINKS=3;
	private Point painter;//location of painter
	//container of points to paint
	private static final Vector<ColorPoint> paintVector= new Vector<ColorPoint>();
	private Color color; //current color of painter
	private final Link[] links= new Link[NUMLINKS];//constant array, all our robot arms will have 3 links
	private final Point[] relativeStarts= new Point[NUMLINKS];
	private Point origin;//origin point, point of arm base

	private DHParams params;

	private MouseListener mListener;
	private MouseMotionListener mMotionListener;
	
	public RobotArm(int w, int h) {
		super();//call default constructor for Canvas
		color=Color.BLACK;// color to black
		this.setSize(new Dimension(w, h));
		
		//Construct links
		links[0]=new Link(150,30);//a new link 150 pixels long and 30 wide
		links[1]= new Link(100,20);
		links[2]= new Link(75,15);
		origin= new Point(0,0);
		origin.setLocation(this.getWidth()/2, this.getHeight());

		// Initialize DH Parameters with theta_i = 0. Others will be constant.
		params = new DHParams(NUMLINKS);

		for (int i = 1; i <= 4; ++i) {
			params.set("alpha", i-1, 0);
			params.set("d", i, 0);
			params.set("theta", i, 0);
		}

		params.set("a", 0, 0);
		params.set("a", 1, 150);
		params.set("a", 2, 100);
		params.set("a", 3, 75);
		
		EnableMouseInput();
        
	}
	private void updateLinks(){
		links[0].updateLink(origin.x-relativeStarts[0].x,
					origin.y-relativeStarts[0].y, 
					Color.RED);
		
		links[1].updateLink(origin.x-relativeStarts[1].x,
					origin.y-relativeStarts[1].y,
					Color.GREEN);
		
		links[2].updateLink(origin.x-relativeStarts[2].x,
					origin.y-relativeStarts[2].y,
					Color.BLUE);

		// For drawing, we have to add up the thetas to get the relative value to draw.
		for (int i = 0; i < NUMLINKS; ++i) {
			double theta = 0;
			for (int j = 0; j < i+1; ++j) {
				theta += params.get("theta", j+1);
			}

			links[i].setTheta(theta);
		}
	}
	@Override
	public void paint(Graphics g){
		origin.setLocation(this.getWidth()/2, this.getHeight());
		
		//draw base
		g.fillOval(origin.x-50, origin.y-10, 100, 20);
		//paint links
		updateLinks();
		for (int i=0;i<NUMLINKS;++i){
			links[i].paint(g);//paint link i
		}
		//draw painter
		Graphics2D g2D=(Graphics2D)g;
		g2D.setColor(Color.BLACK);
		g2D.draw(new Ellipse2D.Double(origin.getX()-painter.getX()-5, origin.getY()-painter.getY()-5, 10, 10));
		//draw painted points
		for(int i=0; i<paintVector.size();++i){
			ColorPoint point=paintVector.get(i);
			g2D.setColor(point.pointColor);//get color of point
			g2D.fill(new Ellipse2D.Double(origin.getX()-point.getX()-5, 
					origin.getY()-point.getY()-5, 10, 10));
		}
			
	}

	// Sets the thetas and adjusts the start points for drawing the links.
	public void setTheta(double t1, double t2, double t3){

		double[][] o = {{0},{0},{0},{1}};
		Matrix orig_0 = new Matrix(o);

		Point[] points = new Point[NUMLINKS+1];

		params.set("theta", 1, t1);
		params.set("theta", 2, t2);
		params.set("theta", 3, t3);

		for (int i = 0; i < NUMLINKS+1; ++i) {
			Matrix mp = params.T(i+1, 0).times(orig_0);
			int x = (int)Math.round(mp.get(1,0));
			int y = (int)Math.round(mp.get(0,0));
			points[i] = new Point(x,y);
		}

		setStarts(points[0], points[1], points[2], points[3]);
	}

    // Performs inverse kinematic calculations based on a geometric solution.
    // Note that x and y are relative to the frames that were attached.
    public void movePainterTo(double x, double y) {

        double a1 = params.get("a", 1);
        double a2 = params.get("a", 2);
        double a3 = params.get("a", 3);
        double r = Math.sqrt(Math.pow(x,2) + Math.pow(y,2));

        // If the point is outside the reachable workspace, do nothing.
        if (r > a1 + a2 + a3 || r < a1 - (a2 + a3)) {
            return;
        }

        // Temp values to make code more readable.
        double tempn = 0, tempd = 0;

        int delta = 0;

        // If we can't reach the point by setting theta1 = atan2(y,x),
        // we need to adjust theta1 by at least the calculated delta.
        if (Math.abs(r-a1) < a2 - a3)
        {
            tempn = 2*Math.pow(a1,2) - Math.pow(a2 - a3, 2);
            tempd = 2*a1*a1;
            delta = (int)Math.ceil(Math.toDegrees(Math.acos(tempn/tempd)));
        }

        double l = Math.sqrt(Math.pow(r,2) + Math.pow(a1,2) 
                             - 2*r*a1*Math.cos(Math.toRadians(delta)));
        
        tempn = Math.pow(a1,2) + Math.pow(l,2) - Math.pow(r,2);
        tempd = 2*a1*l;
        double omega = Math.toDegrees(Math.acos(tempn/tempd));
        
        // Sometimes the answer is NaN because of rounding error.
        if (Double.isNaN(omega)) {
            omega = Math.toDegrees(Math.acos(Math.round(tempn/tempd)));
        }

        tempn = Math.pow(a2,2) + Math.pow(l,2) - Math.pow(a3,2);
        tempd = 2*a2*l;
        double alpha = Math.toDegrees(Math.acos(tempn/tempd));

        if (Double.isNaN(alpha)) {
            alpha = Math.toDegrees(Math.acos(Math.round(tempn/tempd)));
        }

        tempn = Math.pow(a2,2) + Math.pow(a3,2) - Math.pow(l,2);
        tempd = 2*a2*a3;
        double beta = Math.toDegrees(Math.acos(tempn/tempd));

        if (Double.isNaN(beta)) {
            beta = Math.toDegrees(Math.acos(Math.round(tempn/tempd)));
        }

        double theta1 = Math.toDegrees(Math.atan2(y,x)) - delta;
        double theta2, theta3;

        double theta2_1 = 180 - alpha - omega;
        double theta2_2 = 180 + alpha - omega;

        double theta3_1 = 180 - beta;
        double theta3_2 = 180 + beta;

        // Determine which new thetas cause the least movement.
        double theta2_current = params.get("theta", 2);
        double theta3_current = params.get("theta", 3);

        double sqdiffs1 = Math.pow(theta2_current - theta2_1,2)
                        + Math.pow(theta3_current - theta3_1,2);
        double sqdiffs2 = Math.pow(theta2_current - theta2_2,2)
                        + Math.pow(theta3_current - theta3_2,2);

        if (sqdiffs1 < sqdiffs2) {
            theta2 = theta2_1;
            theta3 = theta3_1;
        } else {
            theta2 = theta2_2;
            theta3 = theta3_2;
        }

        this.setTheta(theta1, theta2, theta3);
        
    }

	private void setStarts(Point p1,Point p2, Point p3, Point paint){
		relativeStarts[0]=p1;
		relativeStarts[1]=p2;
		relativeStarts[2]=p3;
		painter=paint;
	}
	public void setPainterColor(Color c){
		color=c;
	}
	public void paintPoint(){
		paintVector.add(new ColorPoint(painter.x,painter.y,color));
		this.repaint();
	}
	public void clearPaint(){
		paintVector.clear();//clear points to paint
		this.repaint();
	}

	public RobotArm(GraphicsConfiguration config) {
		super(config);
	}
	
	public void EnableMouseInput(){
		this.addMouseListener(mListener=new MouseListener() {
			public void mouseReleased(MouseEvent e) {
			}
			
			public void mousePressed(MouseEvent e) {
			}
			
			public void mouseExited(MouseEvent e) {
			}
			
			public void mouseEntered(MouseEvent e) {
			}
			
			public void mouseClicked(MouseEvent e) {
				painter.setLocation(origin.x-e.getX(),origin.y-e.getY());//converts into our coordinate system
                paintPoint();
			}
		});
		
		this.addMouseMotionListener(mMotionListener=new MouseMotionListener() {
			public void mouseMoved(MouseEvent e) {
				movePainterTo(origin.x-e.getX(),origin.y-e.getY());
				//painter.setLocation(origin.x-e.getX(),origin.y-e.getY());
				repaint();
			}
			
			public void mouseDragged(MouseEvent e) {
				movePainterTo(e.getX(),e.getY());
				//painter.setLocation(origin.x-e.getX(),origin.y-e.getY());//converts into our coordinate system
				paintPoint();
			}
		});
	}
	
	public void DisableMouseInput(){
		this.removeMouseListener(mListener);
		this.removeMouseMotionListener(mMotionListener);
	}


}
